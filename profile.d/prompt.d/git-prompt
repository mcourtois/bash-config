#!/bin/bash 

source ~/.bash/functions

local self_dir=$(script_path $BASH_SOURCE[0])
source $self_dir/utils

function __git_prompt {
    ref=$(git symbolic-ref HEAD 2> /dev/null) || return
    git_basedir=$(git rev-parse --git-dir)
    branch_name="(unnamed branch)"     # detached HEAD
    branch_name=${ref#refs/heads/}
    remote_branch_name="$(git rev-parse --abbrev-ref --symbolic-full-name @{u} 2>/dev/null)"
    remote_status="\e[5m${light_red}"
    if [ "${remote_branch_name}" == "@{u}" ]; then
      remote_status="${remote_status}⚠ "
      remote_branch_name=""
    fi

    # Based on https://gist.github.com/woods/31967

    # Set color based on clean/staged/dirty
    git_status="$(git status 2> /dev/null)"
    if [[ ${git_status} =~ "working directory clean" ]]; then
        state="${green}"
    elif [[ ${git_status} =~ "Changes to be committed" ]]; then
        state="${yellow}"
    else
        state="${red}"
    fi

    # Set arrow icon based on status against origin.
    [ ! -f ${git_basedir}/FETCH_HEAD ] && fetch_required=1

    origin_outdated="$(find ${git_basedir}/FETCH_HEAD -mmin +10 2>/dev/null | wc -l | bc)"
    if [[ "${origin_outdated}" == "1" ]]; then
        fetch_required=1
    fi

    if [[ "${fetch_required}" == "1" ]]; then
        echo "Remote information is outdated. Running git fetch."
        git fetch --all
    fi

    if [ "${remote_branch_name}" != "" ]; then
      git_behind="$(git rev-list HEAD..${remote_branch_name} | wc -l | bc)"
      git_ahead="$(git rev-list ${remote_branch_name}..HEAD | wc -l | bc)"

      if [[ "${git_behind}" != "0" ]]; then
          remote_status="${remote_status}↓"
      fi

      if [[ "${git_ahead}" != "0" ]]; then
          remote_status="${remote_status}↑"
      fi
    fi

    remote_status="${remote_status}${reset_color}"

    printf "${white}∓ (${state}${branch_name}${remote_status}${white})${reset_color} "
}

