#!/bin/bash

source ~/.bash/functions

function git-tag-for {
  repo=$(git remote -v 2>/dev/null | head -1 | awk '{ print $2 }')
  for grep in "${@}"; do
    for f in $(git log  --oneline --all --grep="$grep" | awk '{ print $1  }'); do
      git tag --contains $f
    done | sort | uniq -c | sort -s -n -r -k1 | head -1 | awk '{ print "'$grep'\t'$repo'\t" $2 }'
  done 2>/dev/null
}

function git-repo-for() {
  for dir in $(find . -name .git -maxdepth 4); do
    repo=$(dirname $dir)
    pushd $repo >/dev/null
    git-tag-for "${@}"
    popd >/dev/null
  done
}

if [ -z $RGP_MAX_DEPTH ]; then
    RGP_MAX_DEPTH=3
fi

if [[ -n $1 && "$1" =~ ^[0-9]+$ ]]; then
    RGP_MAX_DEPTH=$1
fi

register_alias rgp "recursive-git-pull"

function recursive-git-pull {
  if [ `dirs -p | wc -l` -gt $RGP_MAX_DEPTH ]; then
    return
  fi

  for f in *; do
    if [ -d "$f" ]; then
      pushd "$f" > /dev/null
      if [ -d .git ]; then
        echo -e "\x1B[1;31m--\x1B[0m git pull -> \x1B[0;36m$f\x1B[0m [$(git branch | sed -e 's/ //' | sed -e :a -e '$!N; s/\*[ ]*\([^ ]*\)/\\x1B\[1;31m\1\\x1B\[0m/; s/\n/ /; ta')]"
        git pull --rebase
      else
        recursive-git-pull
      fi
      popd > /dev/null
    fi
  done
}

function git-rebase-upstream {
  if [ ! $(git remote | grep upstream) ]; then
    echo -e "No \x1B[1;31mupstream\x1B[0m remote configured for this repo, unable to rebase \x1B[1;31mupstream/master\x1B[0m"
  else
    git checkout master
    git fetch upstream
    git merge upstream/master
  fi
}
